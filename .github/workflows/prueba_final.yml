name: Build and Push Docker Image

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Set up terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Clean .terraform directory
        run: rm -rf .terraform
          
      - name: Terraform Init
        run: |
          cd Terraform/terraform-1/my-terraform-project
          terraform init

      - name: Terraform Plan
        run: |
          cd Terraform/terraform-1/my-terraform-project 
          terraform plan

      - name: Terraform Apply
        run: |
          cd Terraform/terraform-1/my-terraform-project 
          terraform apply -auto-approve

      - name: Generate ecr_data.json
        run: |
          cd Terraform/terraform-1/my-terraform-project
          terraform output -json ecr_data_json > ../../../api/ecr_data.json

      - name: Install Node.js dependencies
        run: |
          cd api
          npm install

      - name: Start API
        run: |
          cd api
          node api.js &

      - name: Build Docker Image
        run: docker build -t web-app .

      - name: Tag and Push Docker Image
        run: |
          docker tag web-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/prueba-final:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/prueba-final:latest

      - name: Scan Terraform Files with Snyk
        uses: snyk/actions/iac@master
        continue-on-error: true
        with:
          file: Terraform/terraform-1/my-terraform-project
          args: --severity-threshold=low
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Scan Docker Image with Snyk
        uses: snyk/actions/docker@master
        continue-on-error: true
        with:
          image: web-app:latest
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Enable ECR Image Scanning
        run: |
          aws ecr put-image-scanning-configuration \
            --repository-name prueba-final \
            --image-scanning-configuration scanOnPush=true \
            --region us-east-1
  
      - name: Start ECR Image Scan
        run: |
          aws ecr start-image-scan \
            --repository-name prueba-final \
            --image-id imageTag=latest \
            --region us-east-1

      - name: Wait for ECR Image Scan to complete
        run: |
          STATUS="IN_PROGRESS"
          while [[ "$STATUS" == "IN_PROGRESS" ]]; do
            echo "Waiting for scan to complete..."
            sleep 30
            STATUS=$(aws ecr describe-image-scan-findings --repository-name prueba-final --image-id imageTag=latest --region us-east-1 --query 'imageScanStatus.status' --output text)
          done
          echo "Scan complete, fetching results..."            
  
      - name: Check ECR Scan Results
        run: |
          aws ecr describe-image-scan-findings \
            --repository-name prueba-final \
            --image-id imageTag=latest \
            --region us-east-1
